import { NextRequest, NextResponse } from "next/server"

interface TelegramMessage {
  chat_id: string
  text: string
  parse_mode?: "HTML" | "Markdown"
}

export async function POST(request: NextRequest) {
  try {
    const { message } = await request.json()

    if (!message) {
      return NextResponse.json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" }, { status: 400 })
    }

    const botToken = process.env.TELEGRAM_BOT_TOKEN
    const chatId1 = process.env.TELEGRAM_CHAT_ID
    const chatId2 = "7787429894" // –í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç

    if (!botToken || !chatId1) {
      console.error("‚ùå Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
      return NextResponse.json({ error: "Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" }, { status: 500 })
    }

    // –ú–∞—Å—Å–∏–≤ —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const chatIds = [chatId1, chatId2]
    const results = []

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${chatIds.length} —á–∞—Ç–æ–≤...`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç
    for (const chatId of chatIds) {
      const telegramMessage: TelegramMessage = {
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
      }

      try {
        const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(telegramMessage),
        })

        const data = await response.json()

        if (!response.ok || !data.ok) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ Telegram API –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, data)
          results.push({ chatId, success: false, error: data.description || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è" })
        } else {
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`)
          results.push({ chatId, success: true })
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}:`, error)
        results.push({ chatId, success: false, error: error instanceof Error ? error.message : "Unknown error" })
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const successfulSends = results.filter(r => r.success)
    const failedSends = results.filter(r => !r.success)

    if (successfulSends.length === 0) {
      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
      const firstError = failedSends[0]?.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
      throw new Error(firstError)
    }

    if (failedSends.length > 0) {
      console.warn("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:", failedSends)
    }

    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${successfulSends.length} –∏–∑ ${chatIds.length} —á–∞—Ç–æ–≤`)
    return NextResponse.json({
      success: true,
      sentToChats: successfulSends.length,
      failedChats: failedSends.length
    })
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" },
      { status: 500 }
    )
  }
}
