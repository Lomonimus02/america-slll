const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å–∏–º—É–ª–∏—Ä—É–µ–º)
const configPath = path.join(__dirname, '..', 'lib', 'product-images.ts');
const configContent = fs.readFileSync(configPath, 'utf8');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');

// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const imagePathRegex = /\/products\/[^"]+\.(jpg|jpeg|png|webp)/g;
const imagePaths = configContent.match(imagePathRegex) || [];

console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${imagePaths.length} –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º\n`);

let successCount = 0;
let errorCount = 0;

imagePaths.forEach(imagePath => {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –∏–∑ –≤–µ–±-—Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ñ–∞–π–ª–æ–≤—ã–π
  const filePath = path.join(__dirname, '..', 'public', imagePath.replace('/products/', 'products/'));
  
  if (fs.existsSync(filePath)) {
    const stats = fs.statSync(filePath);
    console.log(`‚úÖ ${imagePath} (${Math.round(stats.size / 1024)}KB)`);
    successCount++;
  } else {
    console.log(`‚ùå ${imagePath} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    errorCount++;
  }
});

console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
console.log(`   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: ${successCount}`);
console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${errorCount}`);
console.log(`   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((successCount / (successCount + errorCount)) * 100)}%`);

if (errorCount === 0) {
  console.log('\nüéâ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã!');
} else {
  console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º.');
}
