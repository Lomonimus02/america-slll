"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Plane, MapPin, Calendar, Star, Zap } from "lucide-react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { FlipTimer } from "./flip-timer"

interface TripStage {
  id: string
  name: string
  icon: React.ReactNode
  description: string
  color: string
  bgColor: string
}

const tripStages: TripStage[] = [
  {
    id: "preparation",
    name: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
    icon: <Calendar className="h-4 w-4" />,
    description: "–°–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–µ–∑–¥–∫–µ",
    color: "text-blue-600",
    bgColor: "bg-blue-100",
  },
  {
    id: "departure",
    name: "–û—Ç—ä–µ–∑–¥",
    icon: <Plane className="h-4 w-4" />,
    description: "–í—ã–ª–µ—Ç –≤ –°–®–ê",
    color: "text-purple-600",
    bgColor: "bg-purple-100",
  },
  {
    id: "arrival",
    name: "–ü—Ä–∏–±—ã—Ç–∏–µ",
    icon: <MapPin className="h-4 w-4" />,
    description: "–ü—Ä–∏–∑–µ–º–ª–µ–Ω–∏–µ –≤ –ê–º–µ—Ä–∏–∫–µ",
    color: "text-green-600",
    bgColor: "bg-green-100",
  },
  {
    id: "return",
    name: "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ",
    icon: <Star className="h-4 w-4" />,
    description: "–û–±—Ä–∞—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ–º–æ–π",
    color: "text-red-600",
    bgColor: "bg-red-100",
  },
]

interface EnhancedProgressProps {
  departureDate: Date
  returnDate: Date
  currentDate: Date
}

export function EnhancedProgress({ departureDate, returnDate, currentDate }: EnhancedProgressProps) {
  const [timeLeft, setTimeLeft] = useState({
    days: 0,
    hours: 0,
    minutes: 0,
    seconds: 0,
  })
  const [currentStage, setCurrentStage] = useState(0)
  const [showDetails, setShowDetails] = useState(false)
  const [achievements, setAchievements] = useState<string[]>([])

  useEffect(() => {
    const updateTimer = () => {
      const now = new Date()
      let targetDate: Date

      if (now < departureDate) {
        targetDate = departureDate
      } else if (now < returnDate) {
        targetDate = returnDate
      } else {
        setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 })
        return
      }

      const diff = targetDate.getTime() - now.getTime()
      const days = Math.floor(diff / (1000 * 60 * 60 * 24))
      const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))
      const seconds = Math.floor((diff % (1000 * 60)) / 1000)

      setTimeLeft({ days, hours, minutes, seconds })
    }

    updateTimer()
    const interval = setInterval(updateTimer, 1000)
    return () => clearInterval(interval)
  }, [departureDate, returnDate])

  useEffect(() => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    const now = currentDate
    if (now < departureDate) {
      setCurrentStage(0) // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    } else if (now < returnDate) {
      const tripProgress = (now.getTime() - departureDate.getTime()) / (returnDate.getTime() - departureDate.getTime())
      if (tripProgress < 0.1)
        setCurrentStage(1) // –û—Ç—ä–µ–∑–¥
      else if (tripProgress < 0.5)
        setCurrentStage(2) // –ü—Ä–∏–±—ã—Ç–∏–µ
      else setCurrentStage(3) // –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
    } else {
      setCurrentStage(4) // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const newAchievements = []
    if (currentStage >= 1) newAchievements.push("üõ´ –í–∑–ª–µ—Ç–µ–ª!")
    if (currentStage >= 2) newAchievements.push("üá∫üá∏ –í –ê–º–µ—Ä–∏–∫–µ!")
    if (currentStage >= 3) newAchievements.push("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –¥–æ–º–æ–π!")
    if (currentStage >= 4) newAchievements.push("‚úÖ –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

    setAchievements(newAchievements)
  }, [currentDate, departureDate, returnDate, currentStage])

  // –ü–æ–∑–∏—Ü–∏–∏ —Å–∞–º–æ–ª–µ—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ –Ω–∞–¥ —ç—Ç–∞–ø–∞–º–∏ (grid-cols-4)
  const getPlanePosition = () => {
    // –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è grid-cols-4: —Ü–µ–Ω—Ç—Ä –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
    const positions = [12.5, 37.5, 62.5, 87.5] // –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è 4 –∫–æ–ª–æ–Ω–æ–∫
    return positions[Math.min(currentStage, 3)]
  }

  // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
  const getProgressBarStyle = () => {
    const position = getPlanePosition()

    if (currentStage === 0) {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: —Å–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
      return {
        background: `linear-gradient(to right, #3B82F6 0%, #3B82F6 ${position}%, #E5E7EB ${position}%, #E5E7EB 100%)`,
      }
    } else if (currentStage === 1) {
      // –û—Ç—ä–µ–∑–¥: —Å–∏–Ω–∏–π –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É
      return {
        background: `linear-gradient(to right, #3B82F6 0%, #8B5CF6 ${position}%, #E5E7EB ${position}%, #E5E7EB 100%)`,
      }
    } else if (currentStage === 2) {
      // –ü—Ä–∏–±—ã—Ç–∏–µ: —Å–∏–Ω–∏–π –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É –∫ –∑–µ–ª–µ–Ω–æ–º—É
      return {
        background: `linear-gradient(to right, #3B82F6 0%, #8B5CF6 25%, #10B981 ${position}%, #E5E7EB ${position}%, #E5E7EB 100%)`,
      }
    } else if (currentStage === 3) {
      // –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ: –ø–æ–ª–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
      return {
        background: `linear-gradient(to right, #3B82F6 0%, #8B5CF6 25%, #10B981 50%, #F59E0B ${position}%, #E5E7EB ${position}%, #E5E7EB 100%)`,
      }
    } else {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –ø–æ–ª–Ω—ã–π —Ü–≤–µ—Ç–Ω–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
      return {
        background: `linear-gradient(to right, #3B82F6 0%, #8B5CF6 25%, #10B981 50%, #F59E0B 75%, #EF4444 100%)`,
      }
    }
  }

  // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –ø–æ–∑–∏—Ü–∏–∏ —Å–∞–º–æ–ª–µ—Ç–∏–∫–∞)
  const getProgressBarValue = () => {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ –ø–æ–∑–∏—Ü–∏–∏ —Å–∞–º–æ–ª–µ—Ç–∏–∫–∞
    return getPlanePosition()
  }

  const getStatusText = () => {
    if (currentStage === 0) return "–î–æ –æ—Ç—ä–µ–∑–¥–∞"
    if (currentStage >= 1 && currentStage <= 3) return "–î–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è"
    return "–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ"
  }

  const getCurrentStageName = () => {
    const stageNames = ["–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–û—Ç—ä–µ–∑–¥", "–ü—Ä–∏–±—ã—Ç–∏–µ", "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"]
    return stageNames[Math.min(currentStage, 4)]
  }

  return (
    <Card className="relative overflow-hidden">
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
      <div className="absolute inset-0 bg-gradient-to-r from-blue-50 via-purple-50 to-red-50 opacity-50" />

      <CardHeader className="relative">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <div className="relative">
              <Plane
                className={`h-6 w-6 transition-all duration-500 ${currentStage >= 1 ? "text-green-600 animate-pulse" : "text-blue-600"}`}
              />
              {currentStage >= 1 && currentStage <= 4 && (
                <Zap className="absolute -top-1 -right-1 h-3 w-3 text-yellow-500 animate-bounce" />
              )}
            </div>
            America Express Journey
          </CardTitle>
          <Button variant="ghost" size="sm" onClick={() => setShowDetails(!showDetails)} className="text-xs">
            {showDetails ? "–°–∫—Ä—ã—Ç—å" : "–î–µ—Ç–∞–ª–∏"}
          </Button>
        </div>
      </CardHeader>

      <CardContent className="relative space-y-6">
        {/* –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä —Å flip –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
        <div className="text-center">
          <div className="text-xl font-semibold text-gray-700 mb-4">{getStatusText()}</div>
          {currentStage < 4 && <FlipTimer timeLeft={timeLeft} />}
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å —Å–∞–º–æ–ª–µ—Ç–∏–∫–æ–º –∏ –º–µ—Ä—Ü–∞—é—â–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ */}
        <div className="relative">
          {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –º–µ—Ä—Ü–∞—é—â–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ */}
          <div className="w-full h-4 bg-gray-200 rounded-full overflow-hidden relative">
            <div
              className="h-full rounded-full transition-all duration-500 ease-in-out relative shimmer-border"
              style={getProgressBarStyle()}
            />
          </div>

          {/* –°–∞–º–æ–ª–µ—Ç–∏–∫ —Ç–æ—á–Ω–æ –Ω–∞–¥ —Ç–µ–∫—É—â–∏–º —ç—Ç–∞–ø–æ–º */}
          <div
            className="absolute top-0 transition-all duration-500 ease-in-out"
            style={{ left: `${getPlanePosition()}%`, transform: "translateX(-50%)" }}
          >
            <div className="bg-white rounded-full p-1 shadow-lg border-2 border-blue-500">
              <Plane className="h-3 w-3 text-blue-600" />
            </div>
          </div>

          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ */}
          <div className="text-center mt-2">
            <Badge variant="outline" className="text-xs">
              {getCurrentStageName()}
            </Badge>
          </div>
        </div>

        {/* –≠—Ç–∞–ø—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è */}
        <div className="grid grid-cols-4 gap-3">
          {tripStages.map((stage, index) => (
            <div
              key={stage.id}
              className={`text-center transition-all duration-300 ${
                index <= currentStage ? "opacity-100 scale-100" : "opacity-50 scale-95"
              }`}
            >
              <div
                className={`mx-auto w-10 h-10 rounded-full flex items-center justify-center mb-2 ${
                  index <= currentStage ? stage.bgColor : "bg-gray-100"
                }`}
              >
                <div className={index <= currentStage ? stage.color : "text-gray-400"}>{stage.icon}</div>
              </div>
              <div className="text-xs font-medium">{stage.name}</div>
              {index === currentStage && (
                <div className="mt-1">
                  <Badge variant="secondary" className="text-xs animate-pulse">
                    –°–µ–π—á–∞—Å
                  </Badge>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {showDetails && (
          <div className="space-y-4 animate-in slide-in-from-top-2 duration-300">
            <div className="bg-white rounded-lg p-4 shadow-sm">
              <h4 className="font-semibold mb-2">–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø:</h4>
              <div className="flex items-center gap-3">
                <div className={`p-2 rounded-lg ${tripStages[currentStage]?.bgColor || "bg-gray-100"}`}>
                  <div className={tripStages[currentStage]?.color || "text-gray-400"}>
                    {tripStages[currentStage]?.icon}
                  </div>
                </div>
                <div>
                  <div className="font-medium">{tripStages[currentStage]?.name || "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"}</div>
                  <div className="text-sm text-gray-600">
                    {tripStages[currentStage]?.description || "–ü–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"}
                  </div>
                </div>
              </div>
            </div>

            {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
            {achievements.length > 0 && (
              <div className="bg-white rounded-lg p-4 shadow-sm">
                <h4 className="font-semibold mb-2">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h4>
                <div className="flex flex-wrap gap-2">
                  {achievements.map((achievement, index) => (
                    <Badge key={index} variant="secondary" className="animate-in zoom-in duration-300">
                      {achievement}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-white rounded-lg p-3 shadow-sm text-center">
                <div className="text-lg font-bold text-blue-600">{getProgressBarValue()}%</div>
                <div className="text-xs text-gray-500">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</div>
              </div>
              <div className="bg-white rounded-lg p-3 shadow-sm text-center">
                <div className="text-lg font-bold text-green-600">{currentStage + 1}/4</div>
                <div className="text-xs text-gray-500">–≠—Ç–∞–ø–æ–≤</div>
              </div>
            </div>

            {/* –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ */}
            <div className="bg-white rounded-lg p-4 shadow-sm">
              <h4 className="font-semibold mb-2">üìÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞:</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">–ù–∞—á–∞–ª–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</span>
                  <span className="font-medium">26 –∏—é–Ω—è 2025</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">–û—Ç—ä–µ–∑–¥:</span>
                  <span className="font-medium">15 –∏—é–ª—è 2025</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ:</span>
                  <span className="font-medium">5 –∞–≤–≥—É—Å—Ç–∞ 2025</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>

      <style jsx>{`
        .shimmer-border::after {
          content: '';
          position: absolute;
          top: -2px;
          left: -2px;
          right: -2px;
          bottom: -2px;
          background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.8), transparent);
          border-radius: inherit;
          animation: shimmer 2s infinite;
          pointer-events: none;
        }

        @keyframes shimmer {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }

        @keyframes flip-out {
          0% { transform: rotateX(0deg); }
          50% { transform: rotateX(-90deg); }
          100% { transform: rotateX(-90deg); }
        }

        @keyframes flip-in {
          0% { transform: rotateX(90deg); }
          50% { transform: rotateX(90deg); }
          100% { transform: rotateX(0deg); }
        }

        .animate-flip-out {
          animation: flip-out 0.3s ease-in-out;
        }

        .animate-flip-in {
          animation: flip-in 0.3s ease-in-out;
        }
      `}</style>
    </Card>
  )
}
